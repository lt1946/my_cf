<div class="tab-pane" id="stats">
  <div class="btn-toolbar">
    <div class="btn-group pull-left">
      <a class="old btn" href="#">&lt;</a>
      <a class="recent btn" href="#">&gt;</a>
    </div>
    <div class="btn-group pull-right" data-toggle="buttons-radio" id="chartPeriod">
      <a class="btn" data-period="1h" data-format="LLLL" href="#">1h</a>
      <a class="btn" data-period="6h" data-format="LLLL" href="#">6h</a>
      <a class="btn" data-period="1d" data-format="LLLL" href="#">1d</a>
      <a class="btn active" data-period="7d" data-format="LLLL" href="#">7d</a>
      <a class="btn" data-period="MTD" data-format="LL" href="#">MTD</a>
      <a class="btn" data-period="1m" data-format="LL" href="#">1m</a>
      <a class="btn" data-period="3m" data-format="LL" href="#">3m</a>
      <a class="btn" data-period="6m" data-format="MMMM YYYY" href="#">6m</a>
      <a class="btn" data-period="YTD" data-format="MMMM YYYY" href="#">YTD</a>
      <a class="btn" data-period="1y" data-format="MMMM YYYY" href="#">1y</a>
      <a class="btn" data-period="3y" data-format="MMMM YYYY" href="#">3y</a>
    </div>
  </div>
  <div id="chart" style="width:920px;height: 400px"></div>
  <hr/>
  <table class="table chart">
    <thead>
      <tr>
        <th>Date</th>
        <th title="Percentage of all pings up in the last 24h">Availability</th>
        <th title="Percentage of all pings below slow threshold in the last 24h">Responsiveness</th>
        <th title="Total downtime in the last 24h">Downtime</th>
        <th title="Average response time of all pings in the last 24h">Avg. Response time</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>
  <div class="btn-toolbar">
    <div class="btn-group pull-left">
      <a class="old btn" href="#">&lt;</a>
      <a class="recent btn" href="#">&gt;</a>
    </div>
  </div>
  <div style="clear:left"></div>
</div>
<script id="stat_template" type="text/template">
<tr class="{{= (stat.uptime < 100) ? 'red' : (stat.responsiveness < 100) ? 'orange' : '' }}{{= ['0','6'].indexOf(moment(stat.timestamp).format('d')) !== -1 ? ' week-end' : '' }}">
  <td title="{{= new Date(stat.timestamp) }}">{{= moment(stat.timestamp).format(dateFormat) }}</td>
  <td>{{= stat.uptime.replace('.000', '') }}%</td>
  <td>{{= stat.responsiveness.replace('.000', '') }}%</td>
  <td title="{{= stat.downtime }}s">{{= stat.downtime < 300 ? stat.downtime + 's' : moment.duration(stat.downtime, 'seconds').humanize() }}</td>
  <td>{{= stat.responseTime }}ms</td>
</tr>
</script>
<script>
var chartPeriod;
var chart;
var dateFormat = 'LLLL';
var drawChart = function(uptime, responseTime) {
  var uptimeBoundaries = getBoundaries(uptime);
  chart = new Highcharts.Chart({
    chart: {
      renderTo: 'chart',
      zoomType: 'x',
      alignTicks: false
    },
    title: null,
    legend: { enabled: false },
    xAxis: { type: 'datetime' },
    yAxis: [{
       title: { text: 'Uptime', style: { color: '#4572A7' }},
       labels: { style: { color: '#4572A7' }},
       min: uptimeBoundaries.min < 10 ? uptimeBoundaries.min : uptimeBoundaries.min < 90 ? uptimeBoundaries.min - 10 : (uptimeBoundaries.min - 1),
       max: 100
    }, { 
      title: { text: 'Response Time', style: { color: '#89A54E' }},
      labels: { style: { color: '#89A54E' }},
      opposite: true,
      gridLineWidth: 0
    }],
    series: [
      { name: "Uptime", data: uptime, type: 'area', color: '#4572A7' }, 
      { name: "Response Time", data: responseTime, yAxis: 1, type: 'spline', color: '#89A54E' }
    ],
    plotOptions: {
      area: {
        fillColor: {
          linearGradient: [0, 0, 0, 300],
          stops: [
            [0, 'rgba(80, 144, 197, 0.8)'],
            [1, 'rgba(96,156,210,0.4)']
          ]
        }
      }
    },
    tooltip: {
      formatter: function() {
        return moment(this.x).format(dateFormat) +'<br/>' 
           + (this.series.name == 'Uptime' ? 'Uptime: ' : 'Response Time: ')
           + this.y
           + (this.series.name == 'Uptime' ? '%' : 'ms');
      }
    }
  });
}

var getBoundaries = function(series) {
  var min;
  var max;
  series.forEach(function(element) {
    if (typeof min == 'undefined' || parseFloat(element[1]) < min) {
      min = parseFloat(element[1]);
    }
    if (typeof max == 'undefined' || parseFloat(element[1]) < max) {
      max = parseFloat(element[1]);
    }
  });
  return { min: Math.floor(min), max: Math.floor(max) };
}

$(document).ready(function() {
  $('a[data-toggle="tab"][href="#stats"]').one('shown', function(e) { 
    var timezoneOffset = new Date().getTimezoneOffset() * 60 * 1000;
    var stat_template = document.getElementById('stat_template').innerHTML;
    var updateStats = function() {
      $.getJSON('<%= url %>' + chartPeriod + '/' + page.stat, function(stats) {
        var lines = [];
        var uptime = [];
        var responseTime = [];
        $.each(stats, function(key, stat) {
          lines.unshift(ejs.render(stat_template, { stat: stat }));
          uptime.push([stat.timestamp - timezoneOffset, stat.uptime]);
          responseTime.push([stat.timestamp - timezoneOffset, stat.responseTime]);
        });
        $('#stats tbody').html(lines.join(''));
        drawChart(uptime, responseTime);
      });
    }
    $('#chartPeriod a').click(function(e) {
      chartPeriod = $(this).data('period');
      dateFormat = $(this).data('format');
      page.stat = 1;
      $('#stats .recent').hide();
      updateStats();
      e.preventDefault();
    });
    page.stat = 1;
    chartPeriod = '7d';
    handlePagination('stat', '#stats', updateStats);
  });
});
</script>
